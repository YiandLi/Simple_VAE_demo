# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SR0OSxBUv2KtsTZ44VK2EXx-0VS4J9yi
"""

import sys

import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn.functional as F
import torchvision
from mpl_toolkits.axes_grid1 import ImageGrid
from torch import nn, optim
from torch.autograd import Variable
from torch.utils.tensorboard import SummaryWriter
from torchvision import transforms
from torchvision.utils import make_grid, save_image

sys.path.append("./")
writer = SummaryWriter()
device = "cuda" if torch.cuda.is_available() else "cpu"


def show_samples(images, row, col, image_shape, name="Unknown", save=True, shift=False):
    num_images = row * col
    if shift:
        images = (images + 1.) / 2.
    fig = plt.figure(figsize=(col, row))
    grid = ImageGrid(fig, 111,
                     nrows_ncols=(row, col),
                     axes_pad=0.)
    for i in range(num_images):
        im = images[i].reshape(image_shape)
        axis = grid[i]
        axis.axis('off')
        axis.imshow(im.cpu().detach().numpy())
    plt.axis('off')
    plt.tight_layout()
    if save:
        fig.savefig(name + '.png', bbox_inches="tight", pad_inches=0, format='png')
    plt.show()


class Normal(object):
    def __init__(self, mu, sigma, log_sigma, v=None, r=None):
        self.mu = mu
        self.sigma = sigma  # either stdev diagonal itself, or stdev diagonal from decomposition         self.logsigma = log_sigma
        dim = mu.get_shape()
        if v is None:
            v = torch.FloatTensor(*dim)
        if r is None:
            r = torch.FloatTensor(*dim)
        self.v = v
        self.r = r


class Encoder(torch.nn.Module):
    def __init__(self, D_in, H, D_out):
        super(Encoder, self).__init__()
        self.linear1 = torch.nn.Linear(D_in, H)
        self.linear2 = torch.nn.Linear(H, D_out)
    
    def forward(self, x):
        # x = F.relu(self.linear1(x))
        # return F.relu(self.linear2(x))
        
        x = F.relu(self.linear1(x))
        return self.linear2(x)


class Decoder(torch.nn.Module):
    def __init__(self, D_in, H, D_out):
        super(Decoder, self).__init__()
        self.linear1 = torch.nn.Linear(D_in, H)  # 8 -> 100
        self.linear2 = torch.nn.Linear(H, D_out)  # 100 -> 28 * 28
    
    def forward(self, x):
        x = F.relu(self.linear1(x))
        return F.sigmoid(self.linear2(x))


class VAE(torch.nn.Module):
    latent_dim = 8
    
    def __init__(self, encoder, decoder):
        super(VAE, self).__init__()
        self.encoder = encoder
        self.decoder = decoder
        self._enc_mu = torch.nn.Linear(100, 8).to(device)
        self._enc_log_sigma = torch.nn.Linear(100, 8).to(device)
    
    def _sample_latent(self, h_enc):
        """ Return the latent normal sample z ~ N(mu, sigma^2) """
        mu = self._enc_mu(h_enc)  # 100 -> 8
        log_sigma = self._enc_log_sigma(h_enc)  # 100 -> 8
        sigma = torch.exp(0.5 * log_sigma)  # 100 -> 8, need 0.5 to replace sqrt()
        std_z = torch.from_numpy(np.random.normal(0, 1, size=sigma.size())).float().to(device)  # 从 0，1 标准分布中抽取一个z变量
        
        self.z_mean = mu
        self.z_sigma = sigma
        
        return mu + sigma * Variable(std_z, requires_grad=False)  # Reparameterization trick
    
    def forward(self, state):
        h_enc = self.encoder(state)  # 28 * 28 -> 100 -> 100
        z = self._sample_latent(h_enc)  # -> 8
        return self.decoder(z)  # 8 -> 100 -> 28 * 28


# 这部分是编码器生成与正态分布的差别，在loss中占一部分
def latent_loss(z_mean, z_stddev):
    mean_sq = z_mean * z_mean
    stddev_sq = z_stddev * z_stddev
    return 0.5 * torch.sum(mean_sq + stddev_sq - torch.log(stddev_sq) - 1)  # 这里不能用 mean，不知道为什么


def show_generator(decoder):
    test_latent_vals = torch.randn((16, 8)).to(device)
    output = decoder(test_latent_vals)
    # output = torch.sigmoid(output)
    print("print outputs")
    show_samples(output, 4, 4, [28, 28], name="Unknown", save=True)


if __name__ == '__main__':
    input_dim = 28 * 28
    batch_size = 512
    
    transform = transforms.Compose([
        transforms.ToTensor()
    ])
    print(sys.path)
    mnist = torchvision.datasets.MNIST('./', transform=transform,
                                       download=True,
                                       )
    
    dataloader = torch.utils.data.DataLoader(mnist, batch_size=batch_size,
                                             shuffle=True, num_workers=2)
    
    print('Number of samples: ', len(mnist))
    
    encoder = Encoder(input_dim, 100, 100)
    decoder = Decoder(8, 100, input_dim)
    vae = VAE(encoder, decoder).to(device)
    
    # criterion = nn.MSELoss()
    criterion = lambda recon_x, x: F.binary_cross_entropy(recon_x, x, size_average=False)  # 同理不能用mean
    
    optimizer = optim.Adam(vae.parameters(), lr=1e-3)
    l = None
    total_loss, KL_loss, reconstruction_loss = 0., 0., 0.
    
    for epoch in range(100):
        for i, data in enumerate(dataloader, 0):
            inputs, classes = data
            inputs, classes = Variable(inputs.resize_(len(inputs), input_dim)).to(device), Variable(classes)
            optimizer.zero_grad()
            dec = vae(inputs)
            ll = latent_loss(vae.z_mean, vae.z_sigma)
            # 损失包含两部分，一部分是正太分布的损失，一部分是生成与预期的损失
            rec_loss = criterion(dec, inputs)
            loss = rec_loss + ll
            loss = loss / len(classes)
            loss.backward()
            optimizer.step()
            l = loss.data
            
            total_loss += loss.item()
            KL_loss += ll.item()
            reconstruction_loss += rec_loss.item()
        
        print(epoch, "\n total_loss ", total_loss / len(classes),
              "\n KL_loss ", KL_loss / len(classes),
              "\n reconstruction_loss", reconstruction_loss / len(classes), "---- \n")
        total_loss, KL_loss, reconstruction_loss = 0., 0., 0.
        
        if epoch != 0 and epoch % 10 == 0:
            show_generator(decoder)
            torch.save(vae, "VAE.pth")
    
    writer.close()

